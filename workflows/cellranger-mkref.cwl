cwlVersion: v1.0
class: Workflow
requirements:
- class: SubworkflowFeatureRequirement
- class: StepInputExpressionRequirement
- class: InlineJavascriptRequirement
- class: MultipleInputFeatureRequirement
sd:upstream:
  genome_indices:
  - genome-indices.cwl
inputs:
  alias:
    type: string
    label: Analysis name
    sd:preview:
      position: 1
  genome_fasta_file:
    type: File
    label: Genome type
    doc: |
      Genome type to be used for
      generating reference genome
      indices
    sd:upstreamSource: genome_indices/fasta_output
    sd:localLabel: true
  annotation_gtf_file:
    type: File
    sd:upstreamSource: genome_indices/annotation_gtf
  memory_limit:
    type: int?
    default: 20
    label: Maximum memory used (GB)
    doc: |
      Maximum memory used (GB). The same
      will be applied to virtual memory
    sd:layout:
      advanced: true
  threads:
    type:
    - 'null'
    - type: enum
      symbols:
      - '1'
      - '2'
      - '3'
      - '4'
      - '5'
      - '6'
    default: '4'
    label: Cores/CPUs
    doc: |
      Parallelization parameter to define the
      number of cores/CPUs that can be utilized
      simultaneously.
      Default: 4
    sd:layout:
      advanced: true
outputs:
  indices_folder:
    type: Directory
    outputSource: cellranger_mkref/indices_folder
    label: Cell Ranger genome indices
    doc: |
      Cell Ranger generated genome indices folder
  chrom_length_file:
    type: File
    outputSource: cellranger_mkref/chrom_length_file
    label: Chromosome length file
    doc: |
      Chromosome length file in TSV format
  stdout_log:
    type: File
    outputSource: cellranger_mkref/stdout_log
    label: stdout log generated by cellranger mkref
    doc: |
      stdout log generated by cellranger mkref
  stderr_log:
    type: File
    outputSource: cellranger_mkref/stderr_log
    label: stderr log generated by cellranger mkref
    doc: |
      stderr log generated by cellranger mkref
  arc_indices_folder:
    type: Directory
    outputSource: cellranger_arc_mkref/indices_folder
    label: Cell Ranger ARC genome indices
    doc: |
      Cell Ranger ARC generated genome indices folder
  arc_stdout_log:
    type: File
    outputSource: cellranger_arc_mkref/stdout_log
    label: stdout log generated by cellranger-arc mkref
    doc: |
      stdout log generated by cellranger-arc mkref
  arc_stderr_log:
    type: File
    outputSource: cellranger_arc_mkref/stderr_log
    label: stderr log generated by cellranger-arc mkref
    doc: |
      stderr log generated by cellranger-arc mkref
steps:
  cellranger_mkref:
    run: ../tools/cellranger-mkref.cwl
    in:
      genome_fasta_file: genome_fasta_file
      annotation_gtf_file: annotation_gtf_file
      threads:
        source: threads
        valueFrom: $(parseInt(self))
      memory_limit: memory_limit
      output_folder_name:
        default: cellranger_ref
    out:
    - indices_folder
    - chrom_length_file
    - stdout_log
    - stderr_log
  sort_annotation_gtf:
    run:
      cwlVersion: v1.0
      class: CommandLineTool
      hints:
      - class: DockerRequirement
        dockerPull: python:3.8.6
      inputs:
        script:
          type: string?
          default: |
            #!/usr/bin/env python3
            import re
            import fileinput
            class Gtf(object):
              def __init__(self, gtf_line):
                self.gtf_list = gtf_line.split("\t")
                self.attribute = self.gtf_list[8]
                tmp = map(lambda x: re.split("\s+", x.replace('"', "")), re.split("\s*;\s*", self.attribute.strip().strip(";")))
                self.attribute = dict([x for x in tmp if len(x)==2])
              def __str__(self):
                return "\t".join(self.gtf_list)
            records = []
            for gtf_line in fileinput.input():
              records.append(Gtf(gtf_line))
            records.sort(key=lambda x: (x.attribute["gene_id"]))
            for l in records:
              print(l, end="")
          inputBinding:
            position: 5
        annotation_gtf_file:
          type: File
          inputBinding:
            position: 6
      outputs:
        sorted_annotation_gtf_file:
          type: stdout
      baseCommand:
      - python3
      - -c
      stdout: sorted.gtf
    in:
      annotation_gtf_file: annotation_gtf_file
    out:
    - sorted_annotation_gtf_file
  cellranger_arc_mkref:
    run: ../tools/cellranger-arc-mkref.cwl
    in:
      genome_fasta_file: genome_fasta_file
      annotation_gtf_file: sort_annotation_gtf/sorted_annotation_gtf_file
      exclude_chr:
        default:
        - chrM
      output_folder_name:
        default: cellranger_arc_ref
      threads:
        source: threads
        valueFrom: $(parseInt(self))
      memory_limit: memory_limit
    out:
    - indices_folder
    - stdout_log
    - stderr_log
label: Cell Ranger Reference (RNA, ATAC, RNA+ATAC)
doc: |-
  Cell Ranger Reference (RNA, ATAC, RNA+ATAC)

  Builds a reference genome of a selected species for quantifying
  gene expression and chromatin accessibility. The results of this
  workflow are used in all “Cell Ranger Count” and “Cell Ranger
  Aggregate” pipelines.
sd:version: 100
