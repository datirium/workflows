##############################################################################################
# Dockerfile
# Version v1.6.0
# Build date: 2025-05-05
# Uses ubuntu:latest
# This image runs run_deseq_for_spikein.R which now uses ERCC counts to calculate size factors
# See ref of the rationale here: https://support.bioconductor.org/p/9149231/
# Version 1.4.0 includes a shell script to capture worklow failures
# Build command: docker build --no-cache --rm -t deseqspikein-dev -f scidap-deseqspikein-Dockerfile
# Tag: docker tag deseqspikein-dev avivdemorgan/scidap-deseqspikein:v1.6.0
# Push command: docker image push avivdemorgan/scidap-deseqspikein:v1.6.0
###############################################################################################


#################################################################
# Dockerfile
#
# Software:         BioWardrobe DESeq/DESeq2 script
# Software Version: v0.0.27
# Description:      Dockerized version of DESeq/DESeq2 script from BioWardrobe
# Website:          https://github.com/Barski-lab/workflows
# Provides:         run_deseq.R
#                   run_deseq_lrt.R
#                   get_gene_n_tss.R
#                   run_deseq_manual.R
#                   BiocManager       1.30.10
#                   BiocParallel      1.22.0
#                   DESeq             1.39.0
#                   DESeq2            1.28.1
#                   argparse          latest
#                   pheatmap          latest
# Base Image:       r-base:4.0.2
# Build Cmd:        docker build --no-cache --rm -t deseqspikein-dev -f scidap-deseqspikein-Dockerfile . > ~/Desktop/dockerbuild.log 2>&1
# Run Cmd:          docker run --rm -ti deseqspikein-dev /bin/bash
# Push Cmd1:        docker tag deseqspikein-dev avivdemorgan/scidap-deseqspikein:dev
#      Cmd2:        docker image push robertplayer/scidap-deseqspikein:dev
# Pull Cmd:         docker pull robertplayer/scidap-deseqspikein:dev
# Test dev:         docker run --rm -ti robertplayer/scidap-deseqspikein:dev /bin/bash
# re-tag for PR:    docker tag deseqspikein-dev robertplayer/scidap-deseqspikein:v1.0.0
# Push for PR:      docker image push robertplayer/scidap-deseqspikein:v1.0.0
# Test vx.x.x:      docker run --rm -ti robertplayer/scidap-deseqspikein:v1.0.0 /bin/bash
#################################################################
#
# v1.0.0
# - copied this dockerfile (scidap-deseq-Dockerfile, v1.0.0) and the run_deseq.R script from Barski lab to Datirium repo
# - Update run_deseq.R to output both all genes and filtered gene list by padj
# - Added run_deseq_for_spikein.R to image for ERCC spike-in RNA-Seq samples
# - This new Rscript runs DESeq with sizeFactors set to 1 for all samples
# - Input count matrix is expected to already be normalized for size from spike-in counts (see trim-rnaseq-pe-ercc.cwl for normalization details)
#
#################################################################

FROM ubuntu:latest
LABEL maintainer="aviv.de.morgan@datirium.com"
ENV DEBIAN_FRONTEND=noninteractive
ENV LANG=C.UTF-8
ENV LC_ALL=C.UTF-8

################## BEGIN INSTALLATION ######################

WORKDIR /tmp

COPY ./scripts/run_deseq_for_spikein.R /usr/local/bin/run_deseq_for_spikein.R
COPY ./scripts/entrypoint.sh /usr/local/bin/entrypoint.sh

RUN chmod +x /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/run_deseq_for_spikein.R

# 1) Install build tools, locale, lsb-release, and ALL required dev headers
RUN apt-get update \
 && apt-get install -y --no-install-recommends \
      build-essential \
      ca-certificates \
      wget \
      gnupg2 \
      dirmngr \
      lsb-release \
      apt-transport-https \
      software-properties-common \
      locales \
      # R package system dependencies:
      libgit2-dev \
      libssh2-1-dev \
      libhdf5-dev \
      zlib1g-dev \
      libbz2-dev \
      liblzma-dev \
      libpcre2-dev \
      pkg-config \
      gcc-10-base libgcc-10-dev python3-dev python3-pip libxml2-dev libssl-dev libcurl4-openssl-dev pandoc libfontconfig1-dev libharfbuzz-dev libfribidi-dev libfreetype-dev libpng-dev     libtiff5-dev libjpeg-dev vim && locale-gen en_US.UTF-8 && rm -rf /var/lib/apt/lists/* \
      && pip3 install argparse --break-system-packages

# 2) Add CRAN’s GPG key & apt repo
RUN wget -qO- https://cloud.r-project.org/bin/linux/ubuntu/marutter_pubkey.asc \
      | gpg --dearmor \
      > /usr/share/keyrings/cran_ubuntu_key.gpg \
 && echo "deb [signed-by=/usr/share/keyrings/cran_ubuntu_key.gpg] \
      https://cloud.r-project.org/bin/linux/ubuntu \
      $(lsb_release -cs)-cran40/" \
    > /etc/apt/sources.list.d/cran.list \
 && apt-get update

# 3) Install R
RUN apt-get install -y --no-install-recommends \
      r-base \
      r-base-dev \
 && rm -rf /var/lib/apt/lists/*

# 4) Install BiocManager
RUN Rscript -e "install.packages('BiocManager', repos='https://cloud.r-project.org')"

# 5) Install Bioconductor packages (BioC 3.21)
RUN Rscript -e "BiocManager::install(c('BiocParallel','DESeq2','limma','edgeR', 'SummarizedExperiment','S4Vectors','Rhdf5lib', 'BiocGenerics', 'Biobase', 'rhdf5', 'flowCore', 'cytolib', 'Glimma', 'hopach', 'cmapR'), ask=FALSE, update=FALSE)"
      
# 6) Install CRAN packages
RUN Rscript -e "install.packages(c('EnhancedVolcano', 'remotes', 'tidyverse', 'patchwork', 'argparse', 'data.table', 'pheatmap', 'ggrepel', 'htmlwidgets', 'devtools', 'RProtoBufLib', 'locfit'), repos='https://cloud.r-project.org', dependencies=TRUE)"

RUN export PATH="$PATH:/usr/local/bin"

# The container's entrypoint
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
# no CMD needed — CWL’s baseCommand will be the .R script itself