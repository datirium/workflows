cwlVersion: v1.0
class: CommandLineTool

# https://www.10xgenomics.com/resources/datasets/human-b-cells-from-a-healthy-donor-1-k-cells-2-standard-6-0-0
# https://support.10xgenomics.com/single-cell-vdj/software/pipelines/latest/using/multi#what
# https://support.10xgenomics.com/single-cell-vdj/software/pipelines/latest/output/overview-multi
# https://support.10xgenomics.com/single-cell-vdj/software/pipelines/latest/output/annotation#consensus
# https://support.10xgenomics.com/single-cell-vdj/software/pipelines/latest/output/annotation#airr
# https://support.10xgenomics.com/single-cell-vdj/software/pipelines/latest/output/annotation#clonotype
# https://support.10xgenomics.com/single-cell-vdj/software/pipelines/latest/output/overview#header
# https://support.10xgenomics.com/single-cell-vdj/software/pipelines/latest/output/bam


requirements:
- class: InlineJavascriptRequirement
- class: InitialWorkDirRequirement
  listing: |
    ${
      var listing = [
        {
          "entry": inputs.gex_fastq_file_r1,
          "entryname": "gex_S1_L001_R1_001.fastq",
          "writable": true
        },
        {
          "entry": inputs.gex_fastq_file_r2,
          "entryname": "gex_S1_L001_R2_001.fastq",
          "writable": true
        },
        {
          "entry": inputs.vdj_fastq_file_r1,
          "entryname": "vdj_S1_L001_R1_001.fastq",
          "writable": true
        },
        {
          "entry": inputs.vdj_fastq_file_r2,
          "entryname": "vdj_S1_L001_R2_001.fastq",
          "writable": true
        },
        {
          "entry":`[gene-expression]
          reference,${inputs.gex_indices_folder.path}
          [vdj]
          reference,${inputs.vdj_indices_folder.path}
          [libraries]
          fastq_id,fastqs,lanes,feature_types
          gex,${runtime.outdir},1,gene expression,
          vdj,${runtime.outdir},1,${inputs.vdj_chain_type}`,
          "entryname": "libraries.csv"
        }
      ]
      if (inputs.gex_fastq_file_i1){
        listing.push(
          {
            "entry": inputs.gex_fastq_file_i1,
            "entryname": "gex_S1_L001_I1_001.fastq",
            "writable": true
          }
        );
      };
      if (inputs.gex_fastq_file_i2){
        listing.push(
          {
            "entry": inputs.gex_fastq_file_i2,
            "entryname": "gex_S1_L001_I2_001.fastq",
            "writable": true
          }
        );
      };
      if (inputs.vdj_fastq_file_i1){
        listing.push(
          {
            "entry": inputs.vdj_fastq_file_i1,
            "entryname": "vdj_S1_L001_I1_001.fastq",
            "writable": true
          }
        );
      };
      if (inputs.vdj_fastq_file_i2){
        listing.push(
          {
            "entry": inputs.vdj_fastq_file_i2,
            "entryname": "vdj_S1_L001_I2_001.fastq",
            "writable": true
          }
        );
      };
      return listing;
    }


hints:
- class: DockerRequirement
  dockerPull: cumulusprod/cellranger:7.0.0


inputs:
  
  gex_fastq_file_r1:
    type: File
    doc: |
      GEX FASTQ read 1 file (will be staged into workdir as gex_S1_L001_R1_001.fastq)

  gex_fastq_file_r2:
    type: File
    doc: |
      GEX FASTQ read 2 file (will be staged into workdir as gex_S1_L001_R2_001.fastq)

  gex_fastq_file_i1:
    type: File?
    doc: |
      GEX FASTQ index i7 file (will be staged into workdir as gex_S1_L001_I1_001.fastq)

  gex_fastq_file_i2:
    type: File?
    doc: |
      GEX FASTQ index i5 file (will be staged into workdir as gex_S1_L001_I2_001.fastq)

  vdj_fastq_file_r1:
    type: File
    doc: |
      V(D)J FASTQ read 1 file (will be staged into workdir as vdj_S1_L001_R1_001.fastq)

  vdj_fastq_file_r2:
    type: File
    doc: |
      V(D)J FASTQ read 2 file (will be staged into workdir as vdj_S1_L001_R2_001.fastq)

  vdj_fastq_file_i1:
    type: File?
    doc: |
      V(D)J FASTQ index i7 file (will be staged into workdir as vdj_S1_L001_I1_001.fastq)

  vdj_fastq_file_i2:
    type: File?
    doc: |
      V(D)J FASTQ index i5 file (will be staged into workdir as vdj_S1_L001_I2_001.fastq)

  gex_indices_folder:
    type: Directory
    doc: |
      Path of folder containing 10x-compatible transcriptome reference.
      Should be generated by "cellranger mkref" command

  vdj_indices_folder:
    type: Directory
    doc: |
      Path of folder containing Cell Ranger V(D)J-compatible reference.
      Should be generated by "cellranger mkvdjref" command

  vdj_chain_type:
    type:
    - "null"
    - type: enum
      name: "chain_type"
      symbols:
      - "VDJ"
      - "VDJ-T"
      - "VDJ-B"
      - "VDJ-T-GD"
    default: "VDJ"
    doc: |
      V(D)J chain type. Setting to VDJ will auto-detect the chain type.
      Auto-detection does not work for TRG/D (gamma-delta) chains.
      Note that gamma-delta analysis is enabled but the algorithm has
      not been tested extensively.

  threads:
    type: int?
    inputBinding:
      position: 10
      prefix: "--localcores"
    doc: |
      Set max cores the pipeline may request at one time.
      Default: all available

  memory_limit:
    type: int?
    inputBinding:
      position: 11
      prefix: "--localmem"
    doc: |
      Set max GB the pipeline may request at one time
      Default: all available

  virt_memory_limit:
    type: int?
    inputBinding:
      position: 12
      prefix: "--localvmem"
    doc: |
      Set max virtual address space in GB for the pipeline
      Default: all available


outputs:

  web_summary_report:
    type: File
    outputBinding:
      glob: "sample/outs/per_sample_outs/sample/web_summary.html"
    doc: |
      Run summary metrics and charts in HTML format

  metrics_summary_report:
    type: File
    outputBinding:
      glob: "sample/outs/per_sample_outs/sample/metrics_summary.csv"
    doc: |
      Run summary metrics in CSV format

  possorted_genome_bam_bai:
    type: File
    outputBinding:
      glob: "sample/outs/per_sample_outs/sample/count/sample_alignments.bam"
    secondaryFiles:
    - .bai
    doc: |
      Indexed GEX BAM file containing position-sorted reads aligned to the genome
      and transcriptome, as well as unaligned reads.

  filtered_feature_bc_matrix_folder:
    type: Directory
    outputBinding:
      glob: "sample/outs/per_sample_outs/sample/count/sample_filtered_feature_bc_matrix"
    doc: |
      Folder with filtered feature-barcode matrices containing only cellular
      barcodes in MEX format. Each element of the matrix is the number of UMIs
      associated with a feature (row) and a barcode (column).

  filtered_feature_bc_matrix_h5:
    type: File
    outputBinding:
      glob: "sample/outs/per_sample_outs/sample/count/sample_filtered_feature_bc_matrix.h5"
    doc: |
      Filtered feature-barcode matrices containing only cellular
      barcodes in HDF5 format. Each element of the matrix is the number of UMIs
      associated with a feature (row) and a barcode (column).

  raw_feature_bc_matrices_folder:
    type: Directory
    outputBinding:
      glob: "sample/outs/multi/count/raw_feature_bc_matrix"
    doc: |
      Folder with unfiltered feature-barcode matrices containing all barcodes
      in MEX format. Each element of the matrix is the number of UMIs associated
      with a feature (row) and a barcode (column).

  raw_feature_bc_matrices_h5:
    type: File
    outputBinding:
      glob: "sample/outs/multi/count/raw_feature_bc_matrix.h5"
    doc: |
      Unfiltered feature-barcode matrices containing all barcodes in HDF5 format.
      Each element of the matrix is the number of UMIs associated with a feature
      (row) and a barcode (column).

  secondary_analysis_report_folder:
    type: Directory
    outputBinding:
      glob: "sample/outs/per_sample_outs/sample/count/analysis"
    doc: |
      Folder with secondary analysis of GEX data including dimensionality reduction,
      cell clustering, and differential expression

  loupe_browser_track:
    type: File
    outputBinding:
      glob: "sample/outs/per_sample_outs/sample/count/sample_cloupe.cloupe"
    doc: |
      Loupe Browser visualization and analysis file

  all_contig_reads_bam_bai:
    type: File
    outputBinding:
      glob: "sample/outs/multi/vdj_*/all_contig.bam"
    secondaryFiles:
    - .bai
    doc: |
      Indexed V(D)J BAM file with reads aligned to ALL assembled contigs, per cell barcode.
      This file demonstrates how the reads and UMIs support the assembled contigs within
      a cell barcode. Reads are not aligned across cell barcode boundaries. Please note
      that this BAM excludes reads whose barcodes don't match the whitelist, so it is not
      suitable as an archive of every single input read.
      This file includes reads from all cells barcodes identified by V(D)J algorithm including
      those ones that will be later discarded as non-viable cells by V(D)J algorithm and those
      barcodes that will be later removed after overlapping with cells called by GEX algorithm.

  all_contig_sequences_fasta:
    type: File
    outputBinding:
      glob: "sample/outs/multi/vdj_*/all_contig.fasta"
    secondaryFiles:
    - .fai
    doc: |
      FASTA format sequence for ALL assembled contigs in the V(D)J library.
      This file includes both productive and non-productive contigs with high and low confidence
      assembled for all identified cells barcodes including those ones that will be later discarded
      as non-viable cells by V(D)J algorithm or after overlapping with cells called by GEX algorithm.

  all_contig_annotations_bed:
    type: File
    outputBinding:
      glob: "sample/outs/multi/vdj_*/all_contig_annotations.bed"
    doc: |
      BED file with high-level and detailed annotations of ALL assembled contigs (from cell and
      background barcodes). Used for further investigation into why some contigs were filtered
      out. This file includes both productive and non-productive contigs with high and low
      confidence assembled for all identified cells barcodes including those ones that will be
      later discarded as non-viable cells by V(D)J algorithm or after overlapping with cells
      called by GEX algorithm.

  all_contig_annotations_csv:
    type: File
    outputBinding:
      glob: "sample/outs/multi/vdj_*/all_contig_annotations.csv"
    doc: |
      CSV file with high-level and detailed annotations of ALL assembled contigs (from cell and
      background barcodes). Used for further investigation into why some contigs were filtered
      out. This file includes both productive and non-productive contigs with high and low
      confidence assembled for all identified cells barcodes including those ones that will be
      later discarded as non-viable cells by V(D)J algorithm or after overlapping with cells
      called by GEX algorithm.

  airr_rearrangement_tsv:
    type: File
    outputBinding:
      glob: "sample/outs/per_sample_outs/sample/vdj_*/airr_rearrangement.tsv"
    doc: |
      Annotated contigs and consensus sequences of V(D)J rearrangements
      in the AIRR format. It includes only viable cells identified by
      both V(D)J and GEX algorithms.

  clonotypes_csv:
    type: File
    outputBinding:
      glob: "sample/outs/per_sample_outs/sample/vdj_*/clonotypes.csv"
    doc: |
      CSV file with high-level descriptions of each clonotype. During the clonotype
      grouping stage, cell barcodes are placed in groups called clonotypes. Only viable
      cells identified by both V(D)J and GEX algorithms are used. Each clonotype consists
      of all descendants of a single, fully rearranged common ancestor, as approximated
      computationally. During this process, some cell barcodes are flagged as likely
      artifacts and filtered out, meaning that they are no longer called as cells.
      However, as clonotype grouping stage is hapenning before forming the final version
      of files in the per_sample_outs folder, the reported cells number won't be affected.

  germline_contigs_bam_bai:
    type: File
    outputBinding:
      glob: "sample/outs/per_sample_outs/sample/vdj_*/concat_ref.bam"
    secondaryFiles:
    - .bai
    doc: |
      Indexed V(D)J BAM file with contigs aligned to concatenated germline
      segments. For each clonotype consensus, the reference sequence is the
      annotated germline segments concatenated together. This file shows how
      both the per-cell contigs and the clonotype consensus contig relate to
      the germline reference. Useful for revealing polymorphisms, somatic
      mutations, and recombination-induced differences such as non-templated
      nucleotide additions.

  germline_sequences_fasta:
    type: File
    outputBinding:
      glob: "sample/outs/per_sample_outs/sample/vdj_*/concat_ref.fasta"
    secondaryFiles:
    - .fai
    doc: |
      Concatenated V(D)J reference segments for the segments detected on each
      consensus sequence. These serve as an approximate reference for each
      consensus sequence.

  consensus_contigs_bam_bai:
    type: File
    outputBinding:
      glob: "sample/outs/per_sample_outs/sample/vdj_*/consensus.bam"
    secondaryFiles:
    - .bai
    doc: |
      Indexed V(D)J BAM file with contigs aligned to clonotype consensus.
      Each "reference" sequence is a clonotype consensus sequence, and each
      record is an alignment of a single cell's contig against this consensus.
      This file shows, for a clonotype consensus sequences, how the constituent
      per-cell assemblies support the consensus.

  consensus_sequences_fasta:
    type: File
    outputBinding:
      glob: "sample/outs/per_sample_outs/sample/vdj_*/consensus.fasta"
    secondaryFiles:
    - .fai
    doc: |
      The consensus sequence of each assembled contig.

  consensus_annotations_csv:
    type: File
    outputBinding:
      glob: "sample/outs/per_sample_outs/sample/vdj_*/consensus_annotations.csv"
    doc: |
      CSV file with high-level and detailed annotations of each clonotype
      consensus sequence.

  filtered_contig_annotations_csv:
    type: File
    outputBinding:
      glob: "sample/outs/per_sample_outs/sample/vdj_*/filtered_contig_annotations.csv"
    doc: |
      CSV file with high-level annotations of each high-confidence contig from
      cell-associated barcodes. This is a subset of all_contig_annotations.csv.

  filtered_contig_sequences_fasta:
    type: File
    outputBinding:
      glob: "sample/outs/per_sample_outs/sample/vdj_*/filtered_contig.fasta"
    doc: |
      FASTA format sequence for only high-confidence contigs in cell barcodes.

  loupe_vdj_browser_track:
    type: File
    outputBinding:
      glob: "sample/outs/per_sample_outs/sample/vdj_*/vloupe.vloupe"
    doc: |
      Loupe V(D)J Browser visualization and analysis file

  filtered_data_folder:
    type: Directory
    outputBinding:
      glob: "./sample/outs/per_sample_outs/sample"
    doc: |
      Folder containing filtered data, i.e., only cell-associated barcodes.
      Used by cellranger aggr to aggregate samples for joint analysis.

  stdout_log:
    type: stdout

  stderr_log:
    type: stderr


baseCommand: ["cellranger", "multi", "--disable-ui", "--csv", "libraries.csv", "--id", "sample"]


stdout: cellranger_multi_stdout.log
stderr: cellranger_multi_stderr.log


$namespaces:
  s: http://schema.org/

$schemas:
- https://github.com/schemaorg/schemaorg/raw/main/data/releases/11.01/schemaorg-current-http.rdf

label: "Cell Ranger Multi Gene Expression and V(D)J Repertoire Profiling"
s:name: "Cell Ranger Multi Gene Expression and V(D)J Repertoire Profiling"
s:alternateName: "Quantifies gene expression and performs profiling of V(D)J repertoire from a single GEM well"

s:downloadUrl: https://raw.githubusercontent.com/Barski-lab/workflows/master/tools/cellranger-multi.cwl
s:codeRepository: https://github.com/Barski-lab/workflows
s:license: http://www.apache.org/licenses/LICENSE-2.0

s:isPartOf:
  class: s:CreativeWork
  s:name: Common Workflow Language
  s:url: http://commonwl.org/

s:creator:
- class: s:Organization
  s:legalName: "Cincinnati Children's Hospital Medical Center"
  s:location:
  - class: s:PostalAddress
    s:addressCountry: "USA"
    s:addressLocality: "Cincinnati"
    s:addressRegion: "OH"
    s:postalCode: "45229"
    s:streetAddress: "3333 Burnet Ave"
    s:telephone: "+1(513)636-4200"
  s:logo: "https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png"
  s:department:
  - class: s:Organization
    s:legalName: "Allergy and Immunology"
    s:department:
    - class: s:Organization
      s:legalName: "Barski Research Lab"
      s:member:
      - class: s:Person
        s:name: Michael Kotliar
        s:email: mailto:misha.kotliar@gmail.com
        s:sameAs:
        - id: http://orcid.org/0000-0002-6486-3898


doc: |
  Cell Ranger Multi Gene Expression and V(D)J Repertoire Profiling
  ================================================================

  Quantifies gene expression and performs profiling of V(D)J repertoire
  from a single GEM well.

  Parameters set by default:
  --disable-ui - no need in any UI when running in Docker container
  --id - hardcoded to `sample` to simplify output files location
  --csv - points to the file libraries.csv generated based on
    the input FASTQ files

  No implemented parameters:
  --description 
  --dry
  --jobmode (we will use local by default)
  --mempercore
  --maxjobs
  --jobinterval
  --overrides
  --uiport
  --noexit
  --nopreflight

  As for running cellranger aggr with cellranger multi outputs we
  need only per_sample_outs/sample folder that already includes all
  necessary files, there is no need to return the following files
  as separate outputs:
  - sample_molecule_info.h5  - used for GEX aggregation
  - vdj_contig_info.pb       - used for V(D)J aggregation

  Why do we need to rename input files?
  https://support.10xgenomics.com/single-cell-multiome-atac-gex/software/pipelines/latest/using/using/fastq-input


  The cellranger multi pipeline takes FASTQ files from cellranger mkfastq, BCL Convert,
  or bcl2fastq for any combination of 5' single cell gene expression, Feature Barcode
  (cell surface protein or antigen) and V(D)J libraries from a single GEM well. It
  performs alignment, filtering, barcode counting, and UMI counting on the gene expression
  and/or Feature Barcode libraries. It also performs sequence assembly and paired clonotype
  calling on the V(D)J libraries. Additionally, the cell calls provided by the gene
  expression data are used to improve the cell calls inferred by the V(D)J library.


s:about: |
  Analyze multiplexed data or combined gene expression/immune profiling/feature barcode data

  USAGE:
      cellranger multi [OPTIONS] --id <ID> --csv <CSV>

  OPTIONS:
          --id <ID>               A unique run id and output folder name [a-zA-Z0-9_-]+
          --description <TEXT>    Sample description to embed in output files [default: ]
          --csv <CSV>             Path of CSV file enumerating input libraries and analysis parameters
          --dry                   Do not execute the pipeline. Generate a pipeline invocation (.mro) file and stop
          --jobmode <MODE>        Job manager to use. Valid options: local (default), sge, lsf, slurm or path to a .template file. Search for help on "Cluster Mode" at
                                  support.10xgenomics.com for more details on configuring the pipeline to use a compute cluster [default: local]
          --localcores <NUM>      Set max cores the pipeline may request at one time. Only applies to local jobs
          --localmem <NUM>        Set max GB the pipeline may request at one time. Only applies to local jobs
          --localvmem <NUM>       Set max virtual address space in GB for the pipeline. Only applies to local jobs
          --mempercore <NUM>      Reserve enough threads for each job to ensure enough memory will be available, assuming each core on your cluster has at least this much memory
                                  available. Only applies to cluster jobmodes
          --maxjobs <NUM>         Set max jobs submitted to cluster at one time. Only applies to cluster jobmodes
          --jobinterval <NUM>     Set delay between submitting jobs to cluster, in ms. Only applies to cluster jobmodes
          --overrides <PATH>      The path to a JSON file that specifies stage-level overrides for cores and memory. Finer-grained than --localcores, --mempercore and --localmem.
                                  Consult https://support.10xgenomics.com/ for an example override file
          --uiport <PORT>         Serve web UI at http://localhost:PORT
          --disable-ui            Do not serve the web UI
          --noexit                Keep web UI running after pipestance completes or fails
          --nopreflight           Skip preflight checks
      -h, --help                  Print help information