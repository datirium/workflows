cwlVersion: v1.0
class: CommandLineTool
requirements:
- class: InlineJavascriptRequirement
- class: InitialWorkDirRequirement
  listing: |
    ${
      var listing = [
        {
          "entry": inputs.rna_fastq_file_r1,
          "entryname": "rna_S1_L001_R1_001.fastq",
          "writable": true
        },
        {
          "entry": inputs.rna_fastq_file_r2,
          "entryname": "rna_S1_L001_R2_001.fastq",
          "writable": true
        },
        {
          "entry": inputs.atac_fastq_file_r1,
          "entryname": "atac_S1_L001_R1_001.fastq",
          "writable": true
        },
        {
          "entry": inputs.atac_fastq_file_r2,
          "entryname": "atac_S1_L001_R2_001.fastq",
          "writable": true
        },
        {
          "entry": inputs.atac_fastq_file_r3,
          "entryname": "atac_S1_L001_R3_001.fastq",
          "writable": true
        },
        {
          "entry":`fastqs,sample,library_type
          ${runtime.outdir},rna,Gene Expression
          ${runtime.outdir},atac,Chromatin Accessibility`,
          "entryname": "libraries.csv"
        }
      ]
      if (inputs.rna_fastq_file_i1){
        listing.push(
          {
            "entry": inputs.rna_fastq_file_i1,
            "entryname": "rna_S1_L001_I1_001.fastq",
            "writable": true
          }
        );
      };
      if (inputs.rna_fastq_file_i2){
        listing.push(
          {
            "entry": inputs.rna_fastq_file_i2,
            "entryname": "rna_S1_L001_I2_001.fastq",
            "writable": true
          }
        );
      };
      if (inputs.atac_fastq_file_i1){
        listing.push(
          {
            "entry": inputs.atac_fastq_file_i1,
            "entryname": "atac_S1_L001_I1_001.fastq",
            "writable": true
          }
        );
      };
      return listing;
    }
hints:
- class: DockerRequirement
  dockerPull: biowardrobe2/cellranger-arc:v0.0.1
inputs:
  rna_fastq_file_r1:
    type: File
    doc: |
      RNA FASTQ read 1 file.
      It will be staged into workdir
      as rna_S1_L001_R1_001.fastq.
  rna_fastq_file_r2:
    type: File
    doc: |
      RNA FASTQ read 2 file.
      It will be staged into workdir
      as rna_S1_L001_R2_001.fastq.
  rna_fastq_file_i1:
    type: File?
    doc: |
      RNA FASTQ index i7 file.
      It will be staged into workdir
      as rna_S1_L001_I1_001.fastq.
  rna_fastq_file_i2:
    type: File?
    doc: |
      RNA FASTQ index i5 file.
      It will be staged into workdir
      as rna_S1_L001_I2_001.fastq.
  atac_fastq_file_r1:
    type: File
    doc: |
      ATAC FASTQ read 1 file.
      It will be staged into workdir
      as atac_S1_L001_R1_001.fastq.
  atac_fastq_file_r2:
    type: File
    doc: |
      ATAC FASTQ read 2 file.
      Alternative name is index i5 file.
      It will be staged into workdir
      as atac_S1_L001_R2_001.fastq.
  atac_fastq_file_r3:
    type: File
    doc: |
      ATAC FASTQ read 3 file.
      Alternative name is read 2 file.
      It will be staged into workdir
      as atac_S1_L001_R3_001.fastq.
  atac_fastq_file_i1:
    type: File?
    doc: |
      ATAC FASTQ index i7 file.
      It will be staged into workdir
      as atac_S1_L001_I1_001.fastq.
  indices_folder:
    type: Directory
    inputBinding:
      position: 5
      prefix: --reference
    doc: |
      Compatible with Cell Ranger ARC
      reference folder that includes
      STAR and BWA indices. Should be
      generated by "cellranger-arc
      mkref" command.
  exclude_introns:
    type: boolean?
    inputBinding:
      position: 6
      prefix: --gex-exclude-introns
    doc: |
      Disable counting of intronic reads.
      In this mode, only reads that are
      exonic and compatible with annotated
      splice junctions in the reference are
      counted. Note: using this mode will
      reduce the UMI counts in the
      feature-barcode matrix.
  force_min_atac_counts:
    type: int?
    inputBinding:
      position: 7
      prefix: --min-atac-count
    doc: |
      Cell caller override: define the minimum number of RNA UMI
      counts for a cell barcode. Note: this option must be
      specified in conjunction with `--min-atac-count`. With
      `--min-atac-count=X` and `--min-gex-count=Y`, a barcode is
      defined as a cell if it contains at least X ATAC counts
      AND at least Y RNA UMI counts.
  force_min_rna_counts:
    type: int?
    inputBinding:
      position: 8
      prefix: --min-gex-count
    doc: |
      Cell caller override: define the minimum number of RNA UMI
      counts for a cell barcode. Note: this option must be
      specified with `--min-atac-count`. With `--min-atac-count=X`
      and `--min-gex-count=Y`, a barcode is defined as a cell if
      it has at least X ATAC counts AND Y RNA UMI counts.
  force_peaks_bed_file:
    type: File?
    inputBinding:
      position: 9
      prefix: --peaks
    doc: "Peak caller override: specify peaks to use in downstream \nanalyses from supplied 3-column BED file. The supplied \npeaks file must be sorted by position and not contain \noverlapping peaks; comment lines beginning with `#` are \nallowed.\n"
  threads:
    type: int?
    inputBinding:
      position: 10
      prefix: --localcores
    doc: |
      Set max cores the pipeline
      may request at one time.
      Default: all available
  memory_limit:
    type: int?
    inputBinding:
      position: 11
      prefix: --localmem
    doc: |
      Set max GB the pipeline
      may request at one time.
      Default: all available
  virt_memory_limit:
    type: int?
    inputBinding:
      position: 12
      prefix: --localvmem
    doc: |
      Set max virtual address
      space in GB for the pipeline.
      Default: all available
outputs:
  web_summary_report:
    type: File
    outputBinding:
      glob: sample/outs/web_summary.html
    doc: |
      Run summary metrics and charts
      in HTML format.
  metrics_summary_report:
    type: File
    outputBinding:
      glob: sample/outs/summary.csv
    doc: |
      Run summary metrics
      in CSV format.
  barcode_metrics_report:
    type: File
    outputBinding:
      glob: sample/outs/per_barcode_metrics.csv
    doc: |
      ATAC and RNA read count summaries generated for every
      barcode observed in the experiment. The columns contain
      the paired ATAC and Gene Expression barcode sequences,
      ATAC and Gene Expression QC metrics for that barcode,
      as well as whether this barcode was identified as a
      cell-associated partition by the pipeline.
      More details:
      https://support.10xgenomics.com/single-cell-multiome-atac-gex/software/pipelines/latest/output/per_barcode_metrics
  rna_possorted_genome_bam_bai:
    type: File
    outputBinding:
      glob: sample/outs/gex_possorted_bam.bam
    secondaryFiles:
    - .bai
    doc: |
      RNA position-sorted reads aligned to
      the genome and transcriptome annotated
      with barcode information in BAM format.
  atac_possorted_genome_bam_bai:
    type: File
    outputBinding:
      glob: sample/outs/atac_possorted_bam.bam
    secondaryFiles:
    - .bai
    doc: |
      ATAC position-sorted reads aligned to
      the genome annotated with barcode
      information in BAM format.
  filtered_feature_bc_matrix_folder:
    type: Directory
    outputBinding:
      glob: sample/outs/filtered_feature_bc_matrix
    doc: "Filtered feature barcode matrix stored as a CSC sparse \nmatrix in MEX format. The rows consist of all gene and \npeak features concatenated together (identical to raw \nfeature barcode matrix), and the columns are restricted \nto barcodes identified as cells.\n"
  filtered_feature_bc_matrix_h5:
    type: File
    outputBinding:
      glob: sample/outs/filtered_feature_bc_matrix.h5
    doc: "Filtered feature barcode matrix stored as a CSC sparse \nmatrix in hdf5 format. The rows consist of all gene and \npeak features concatenated together (identical to raw \nfeature barcode matrix), and the columns are restricted \nto barcodes identified as cells.\n"
  raw_feature_bc_matrices_folder:
    type: Directory
    outputBinding:
      glob: sample/outs/raw_feature_bc_matrix
    doc: "Raw feature barcode matrix stored as a CSC sparse matrix \nin MEX format. The rows consist of all gene and peak \nfeatures concatenated together, and the columns consist \nof all observed barcodes with non-zero signal for either \nATAC or gene expression.\n"
  raw_feature_bc_matrices_h5:
    type: File
    outputBinding:
      glob: sample/outs/raw_feature_bc_matrix.h5
    doc: "Raw feature barcode matrix stored as a CSC sparse matrix \nin hdf5 format. The rows consist of all gene and peak \nfeatures concatenated together, and the columns consist \nof all observed barcodes with non-zero signal for either \nATAC or gene expression.\n"
  secondary_analysis_report_folder:
    type: Directory
    outputBinding:
      glob: sample/outs/analysis
    doc: "Various secondary analyses that utilize the ATAC data, \nthe RNA data, and their linkage: dimensionality reduction \nand clustering results for the ATAC and RNA data, \ndifferential expression, and differential accessibility \nfor all clustering results, and linkage between ATAC and \nRNA data.\n"
  rna_molecule_info_h5:
    type: File
    outputBinding:
      glob: sample/outs/gex_molecule_info.h5
    doc: |
      Count and barcode information for
      every RNA molecule observed  in
      the experiment in hdf5 format.
  loupe_browser_track:
    type: File
    outputBinding:
      glob: sample/outs/cloupe.cloupe
    doc: |
      Loupe Browser visualization file
      with all the analysis outputs.
  atac_fragments_file:
    type: File
    outputBinding:
      glob: sample/outs/atac_fragments.tsv.gz
    secondaryFiles:
    - .tbi
    doc: |
      Count and barcode information for
      every ATAC fragment observed in
      the experiment in TSV format.
  atac_peaks_bed_file:
    type: File
    outputBinding:
      glob: sample/outs/atac_peaks.bed
    doc: |
      Locations of open-chromatin regions
      identified in this sample. These
      regions are referred to as "peaks".
  atac_cut_sites_bigwig_file:
    type: File
    outputBinding:
      glob: sample/outs/atac_cut_sites.bigwig
    doc: |
      Genome track of observed transposition
      sites in the experiment smoothed at a
      resolution of 400 bases in bigWig format.
  atac_peak_annotation_file:
    type: File
    outputBinding:
      glob: sample/outs/atac_peak_annotation.tsv
    doc: |
      Annotations of peaks based on genomic
      proximity alone. Note that these are
      not functional annotations and they
      do not make use of linkage with RNA
      data.
  stdout_log:
    type: stdout
  stderr_log:
    type: stderr
baseCommand:
- cellranger-arc
- count
- --disable-ui
- --libraries
- libraries.csv
- --id
- sample
stdout: cellranger_arc_count_stdout.log
stderr: cellranger_arc_count_stderr.log
label: Cell Ranger Count (RNA+ATAC)
doc: |
  Cell Ranger Count (RNA+ATAC)

  Quantifies single-cell gene expression and chromatin accessibility
  of the sequencing data from a single 10x Genomics library in a
  combined manner.

  Parameters set by default:
  --disable-ui - no need in any UI when running in Docker container
  --id - hardcoded to `sample` to simplify output files location
  --libraries - points to the file libraries.csv generated based on
    the input FASTQ files

  No implemented parameters:
  --no-bam - we want to always generate BAM files
  --dry
  --noexit
  --nopreflight
  --description
  --uiport
  --overrides
  --jobinterval
  --maxjobs
  --mempercore
  --jobmode (we will use local by default)

  Why do we need to rename input files?
  https://support.10xgenomics.com/single-cell-multiome-atac-gex/software/pipelines/latest/using/using/fastq-input


  Cell Ranger ARC count performs alignment, filtering, barcode counting,
  peak calling and counting of both ATAC and RNA molecules. Furthermore,
  it uses the Chromium cellular barcodes to generate feature-barcode matrices,
  perform dimensionality reduction, determine clusters, perform differential
  analysis on clusters and identify linkages between peaks and genes. The
  count pipeline can take input from multiple sequencing runs on the same
  GEM well.
